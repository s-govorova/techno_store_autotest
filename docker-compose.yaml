# This setup allows you to both connect from within the docker-compose context and from services running on your local
# machine but not as part of the docker-compose setup. Any client connecting to the kafka from the outside can connect to
# localhost:9092 while services running as part of the docker-compose connect to kafka:9093
#
# To access kafka-ui: http://localhost:7777
#
# I hope this helps someone out there! :)

name: kafka_cluster

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.15
    container_name: zookeeper
    networks:
      - local-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.15
    container_name: kafka
    networks:
      - local-kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

  init-kafka:
    image: confluentinc/cp-kafka:7.2.15
    container_name: create_topics
    networks:
      - local-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic out_store.shop_store.products_info --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic shop_store.out_store.products_info --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

#  если необходимо использовать auro schema, то можно развернуть и пользоваться
#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.2.15
#    container_name: schema-registry
#    networks:
#      - local-kafka
#    depends_on:
#      - zookeeper
#      - kafka
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
#      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
#      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      - local-kafka
    depends_on:
      - kafka
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

networks:
  local-kafka:
    driver: bridge
